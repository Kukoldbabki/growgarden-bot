import json
import time
import logging
import threading
import requests
import telebot
from telebot import apihelper, types

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
API_TOKEN = "7871400456:AAGqreZevm6GpViypbYYQ8wjcs4VnV8ueR0"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
WATCHFILE = "watchlist.json"
STATE_FILE = "bot_state.json"
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
# ================================================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
apihelper.READ_TIMEOUT = 45
apihelper.CONNECT_TIMEOUT = 30
apihelper.RETRY_ON_ERROR = True

bot = telebot.TeleBot(API_TOKEN, threaded=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
file_lock = threading.Lock()

def load_data():
    with file_lock:
        try:
            with open(WATCHFILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

def save_data(data):
    with file_lock:
        with open(WATCHFILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

def load_state():
    with file_lock:
        try:
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                return set(json.load(f).get("notified", []))
        except (FileNotFoundError, json.JSONDecodeError):
            return set()

def save_state(notified_set):
    with file_lock:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump({"notified": list(notified_set)}, f, ensure_ascii=False)

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
MOCK_ITEMS = [
    "–°–µ–º–µ–Ω–∞ –æ–≥—É—Ä—Ü–∞", "–°–µ–º–µ–Ω–∞ —Ç–æ–º–∞—Ç–∞", "–°–µ–º–µ–Ω–∞ –ø–µ—Ä—Ü–∞",
    "–£–¥–æ–±—Ä–µ–Ω–∏–µ BioGrow", "–ì—Ä—É–Ω—Ç Premium"
]

def fetch_all_items():
    """–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
        resp = requests.get("https://grow-garden-api.herokuapp.com/api/items", timeout=10)
        resp.raise_for_status()
        return [item["name"] for item in resp.json()]
    except Exception as e:
        logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock-–¥–∞–Ω–Ω—ã–µ. –û—à–∏–±–∫–∞: {e}")
        return MOCK_ITEMS

def check_stock():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
    try:
        notified = load_state()
        user_data = load_data()
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock-–¥–∞–Ω–Ω—ã–µ
        mock_stock = [
            {"name": "–°–µ–º–µ–Ω–∞ –æ–≥—É—Ä—Ü–∞", "in_stock": True, "price": "149 ‚ÇΩ"},
            {"name": "–£–¥–æ–±—Ä–µ–Ω–∏–µ BioGrow", "in_stock": False}
        ]
        
        for user_id, tracked_items in user_data.items():
            for item in mock_stock:
                if item["name"] in tracked_items and item.get("in_stock"):
                    item_key = f"{user_id}|{item['name']}"
                    if item_key not in notified:
                        try:
                            bot.send_message(
                                int(user_id),
                                f"üå± *–î–û–°–¢–£–ü–ù–û!* {item['name']}\n"
                                f"üíµ –¶–µ–Ω–∞: {item.get('price', '?')}",
                                parse_mode="Markdown"
                            )
                            notified.add(item_key)
                            save_state(notified)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        current_items = {i["name"] for i in mock_stock if i.get("in_stock")}
        for item_key in list(notified):
            _, item_name = item_key.split("|", 1)
            if item_name not in current_items:
                notified.remove(item_key)
                save_state(notified)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞: {e}")

def run_bot():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤–µ–±—Ö—É–∫–∏
    try:
        bot.remove_webhook()
        time.sleep(2)
        logger.info("–í–µ–±—Ö—É–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    try:
        me = bot.get_me()
        logger.info(f"–ë–æ—Ç @{me.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return
    
    # –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    def monitor():
        while True:
            check_stock()
            time.sleep(CHECK_INTERVAL)
    
    monitor_thread = threading.Thread(target=monitor, daemon=True)
    monitor_thread.start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞–¥–µ–Ω–∏–π
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ polling...")
            bot.infinity_polling(
                none_stop=True,
                timeout=30,
                long_polling_timeout=20
            )
        except Exception as e:
            logger.error(f"–ë–æ—Ç —É–ø–∞–ª: {e}")
            time.sleep(10)

if __name__ == "__main__":
    run_bot()
