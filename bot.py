import json
import time
import logging
import threading
import requests
import telebot
from telebot import types

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
API_TOKEN = "7871400456:AAGqreZevm6GpViypbYYQ8wjcs4VnV8ueR0"
WATCHFILE = "watchlist.json"
STATE_FILE = "bot_state.json"  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
API_BASE = "https://grow-garden-api.herokuapp.com/api"
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
# ================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(API_TOKEN)

# --------- –£–õ–£–ß–®–ï–ù–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï ---------
def load_data():
    try:
        with open(WATCHFILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data):
    with open(WATCHFILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_state():
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f).get("notified", []))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_state(notified_set):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump({"notified": list(notified_set)}, f, ensure_ascii=False)

# --------- –ó–ê–©–ò–©–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì ---------
def fetch_all_items():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        resp = requests.get(f"{API_BASE}/items", timeout=10)
        resp.raise_for_status()
        return [item["name"] for item in resp.json()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {str(e)}")
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# --------- –¢–ï–õ–ï–ì–†–ê–ú –ò–ù–¢–ï–†–§–ï–ô–° ---------
def main_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("üîî –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å", callback_data="track"),
        types.InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data="view"),
    )
    return kb

def items_keyboard(user_id):
    available = fetch_all_items()
    user_data = load_data().get(str(user_id), [])
    kb = types.InlineKeyboardMarkup(row_width=2)
    
    for name in available:
        status = "‚úÖ" if name in user_data else "‚ûï"
        kb.add(types.InlineKeyboardButton(
            f"{status} {name}", 
            callback_data=f"tog|{name}"
        ))
    
    kb.row(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

# --------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---------
@bot.message_handler(commands=["start", "help"])
def cmd_start(message):
    bot.send_message(
        message.chat.id,
        "üå± *–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ–º—è–Ω Grow Garden*\n"
        "–ù–∞–∂–º–∏ üîî —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–µ–º–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        reply_markup=main_keyboard(),
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data == "track")
def track_callback(call):
    bot.edit_message_text(
        "üîç –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=items_keyboard(call.from_user.id)
    )

@bot.callback_query_handler(func=lambda call: call.data == "view")
def view_callback(call):
    user_items = load_data().get(str(call.from_user.id), [])
    text = "üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n" + "\n".join(f"‚Ä¢ {item}" for item in user_items) if user_items else "_–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç_"
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="Markdown",
        reply_markup=main_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("tog|"))
def toggle_item(call):
    _, item_name = call.data.split("|", 1)
    data = load_data()
    user_id = str(call.from_user.id)
    user_items = set(data.get(user_id, []))
    
    if item_name in user_items:
        user_items.remove(item_name)
    else:
        user_items.add(item_name)
    
    data[user_id] = list(user_items)
    save_data(data)
    bot.answer_callback_query(call.id, f"{'‚ùå –£–¥–∞–ª–µ–Ω–æ' if item_name in user_items else '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ'} {item_name}")
    bot.edit_message_reply_markup(
        call.message.chat.id,
        call.message.message_id,
        reply_markup=items_keyboard(call.from_user.id)
    )

# --------- –Ø–î–†–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ---------
def check_stock():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞...")
    notified = load_state()
    user_data = load_data()
    changes_detected = False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫
        resp = requests.get(f"{API_BASE}/stock", timeout=15)
        resp.raise_for_status()
        current_stock = resp.json()
        
        # –ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_id, tracked_items in user_data.items():
            for item in current_stock:
                if item["name"] in tracked_items and item.get("in_stock"):
                    item_key = f"{user_id}|{item['name']}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï –ø–æ–∑–∏—Ü–∏–∏
                    if item_key not in notified:
                        try:
                            bot.send_message(
                                int(user_id),
                                f"üå± *–î–û–°–¢–£–ü–ù–û!* {item['name']}\n"
                                f"üíµ –¶–µ–Ω–∞: {item.get('price', '?')}",
                                parse_mode="Markdown"
                            )
                            notified.add(item_key)
                            changes_detected = True
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} - {item['name']}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        for item_key in list(notified):
            user_id, item_name = item_key.split("|", 1)
            if not any(i["name"] == item_name and i.get("in_stock") for i in current_stock):
                notified.remove(item_key)
                changes_detected = True
        
        if changes_detected:
            save_state(notified)
            
    except Exception as e:
        logger.error(f"CRITICAL ERROR: {str(e)}")

# --------- –ó–ê–ü–£–°–ö –§–û–ù–û–í–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ---------
def background_checker():
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    while True:
        check_stock()
        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=background_checker, daemon=True)
    monitor_thread.start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ Telegram
    bot.infinity_polling()
