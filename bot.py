import json
import time
import requests
from bs4 import BeautifulSoup
import os
import telebot
import schedule

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
API_TOKEN  = os.getenv("API_TOKEN")  # –∏–∑ Render environment
YOUR_CHAT  = int(os.getenv("YOUR_CHAT_ID"))  # –∏–∑ Render environment
WATCHFILE  = "watchlist.json"
# URL –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è XanaOG
API_BASE   = os.getenv("API_BASE", "https://grow-garden-api.herokuapp.com/api")  # –∏–ª–∏ —Å–≤–æ–π API URL
CHECK_FREQ = 5  # –º–∏–Ω—É—Ç—ã 5  # –º–∏–Ω—É—Ç—ã

bot = telebot.TeleBot(API_TOKEN)
notified = set()

# --------- –†–∞–±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º ---------
def load_data():
    try:
        return json.load(open(WATCHFILE, "r", encoding="utf-8"))
    except:
        return {}

def save_data(d):
    json.dump(d, open(WATCHFILE, "w", encoding="utf-8"), ensure_ascii=False, indent=2)

# --------- –í—ã—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã ---------
def fetch_all_items():
    """
    –ó–∞–ø—Ä–æ—Å –∫ API, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–º—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:
    GET {API_BASE}/items
    –û—Ç–≤–µ—Ç: [{ id, name, category, ... }, ...]
    """
    resp = requests.get(f"{API_BASE}/items")
    resp.raise_for_status()
    return [item["name"] for item in resp.json()]

# --------- Telegram-–º–µ–Ω—é ---------
def main_kb():
    kb = telebot.types.InlineKeyboardMarkup()
    kb.row(
        telebot.types.InlineKeyboardButton("üîî –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å", callback_data="track"),
        telebot.types.InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data="view"),
    )
    return kb

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
def items_kb(user_id):
    available = fetch_all_items()
    data = load_data().get(str(user_id), [])
    kb = telebot.types.InlineKeyboardMarkup(row_width=2)
    for name in available:
        mark = "‚úÖ" if name in data else "‚ûï"
        kb.insert(
            telebot.types.InlineKeyboardButton(f"{mark} {name}", callback_data=f"tog|{name}")
        )
    kb.row(telebot.types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

# --------- –•—ç–Ω–¥–ª–µ—Ä—ã ---------  
@bot.message_handler(commands=["start"])
def cmd_start(m):
    bot.send_message(m.chat.id, "üå± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())

@bot.callback_query_handler(lambda c: c.data == "track")
def cb_track(c):
    bot.edit_message_text(
        "üîç –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:", c.from_user.id, c.message.message_id,
        reply_markup=items_kb(c.from_user.id)
    )

@bot.callback_query_handler(lambda c: c.data == "view")
def cb_view(c):
    wl = load_data().get(str(c.from_user.id), [])
    text = "üìã –¢–≤–æ–π —Å–ø–∏—Å–æ–∫:\n" + ("\n".join(f"‚Ä¢ {x}" for x in wl) if wl else "_–ø—É—Å—Ç–æ_")
    bot.edit_message_text(text, c.from_user.id, c.message.message_id, parse_mode="Markdown", reply_markup=main_kb())

@bot.callback_query_handler(lambda c: c.data.startswith("tog|"))
def cb_toggle(c):
    _, name = c.data.split("|", 1)
    d = load_data()
    uid = str(c.from_user.id)
    wl = set(d.get(uid, []))
    if name in wl: wl.remove(name)
    else: wl.add(name)
    d[uid] = list(wl)
    save_data(d)
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    bot.edit_message_reply_markup(c.from_user.id, c.message.message_id, reply_markup=items_kb(c.from_user.id))

# --------- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–æ–∫–∞ ---------
def check_stock():
    d = load_data()
    if not d: return
    # GET /listings –∏–ª–∏ /stock –≤ API
    resp = requests.get(f"{API_BASE}/stock")
    resp.raise_for_status()
    stocks = resp.json()  # –æ–∂–∏–¥–∞–µ–º [{ name, price, in_stock }, ...]
    for uid, wl in d.items():
        for item in stocks:
            if item["name"] in wl and item.get("in_stock"):
                key = f"{uid}|{item['name']}"
                if key not in notified:
                    bot.send_message(int(uid), f"üîî {item['name']} –≤ –Ω–∞–ª–∏—á–∏–∏ –∑–∞ {item['price']}!", parse_mode="Markdown")
                    notified.add(key)
    # –û—á–∏—â–∞–µ–º —É—à–µ–¥—à–∏–µ
    for key in list(notified):
        uid, name = key.split('|',1)
        if name not in [i['name'] for i in stocks if i.get('in_stock')]:
            notified.remove(key)

# --------- –°—Ç–∞—Ä—Ç ---------
if __name__ == "__main__":
    schedule.every(CHECK_FREQ).minutes.do(check_stock)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    import _thread
    def loop():
        while True:
            schedule.run_pending()
            time.sleep(1)
    _thread.start_new_thread(loop, ())
    bot.infinity_polling()
